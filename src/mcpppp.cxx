// generated by Fast Light User Interface Designer (fluid) version 1.0306

#include "mcpppp.h"

void UI::cb_Close_i(Fl_Button*, void*) {
  path_warning->hide();
}
void UI::cb_Close(Fl_Button* o, void* v) {
  ((UI*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

UI::UI() {
  { window = new Fl_Double_Window(660, 420, "MCPPPP");
    window->color((Fl_Color)48);
    window->callback((Fl_Callback*)windowclosed, (void*)(this));
    { Fl_Button* o = new Fl_Button(445, 370, 190, 30, "Run");
      o->tooltip("Start conversion process");
      o->box(FL_BORDER_BOX);
      o->down_box(FL_BORDER_BOX);
      o->color(FL_DARK2);
      o->selection_color((Fl_Color)43);
      o->labelfont(1);
      o->labelsize(16);
      o->callback((Fl_Callback*)run);
    } // Fl_Button* o
    { // Output in place of stdout
      output = new Fl_Browser(25, 40, 395, 275);
      output->box(FL_BORDER_BOX);
      output->textfont(4);
    } // Fl_Browser* output
    { Fl_Check_Button* o = new Fl_Check_Button(25, 380, 56, 16, "FSB");
      o->tooltip("FabricSkyboxes");
      o->down_box(FL_DOWN_BOX);
      o->value(1);
      o->callback((Fl_Callback*)conversion);
      o->when(FL_WHEN_CHANGED);
    } // Fl_Check_Button* o
    { Fl_Check_Button* o = new Fl_Check_Button(185, 380, 56, 16, "VMT");
      o->tooltip("Varied Mob Textures");
      o->down_box(FL_DOWN_BOX);
      o->value(1);
      o->callback((Fl_Callback*)conversion);
      o->when(FL_WHEN_CHANGED);
    } // Fl_Check_Button* o
    { Fl_Check_Button* o = new Fl_Check_Button(360, 380, 56, 16, "CIM");
      o->tooltip("Chime");
      o->down_box(FL_DOWN_BOX);
      o->value(1);
      o->callback((Fl_Callback*)conversion);
      o->when(FL_WHEN_CHANGED);
    } // Fl_Check_Button* o
    { scroll = new Fl_Scroll(445, 55, 190, 260, "Resourcepacks to convert");
      scroll->color((Fl_Color)48);
      { // padding
        Fl_Check_Button* o = new Fl_Check_Button(445, 60, 190, 15);
        o->down_box(FL_DOWN_BOX);
        o->labeltype(FL_NO_LABEL);
        o->hide();
        o->deactivate();
      } // Fl_Check_Button* o
      scroll->end();
    } // Fl_Scroll* scroll
    { Fl_Button* o = new Fl_Button(355, 330, 64, 25, "Browse");
      o->tooltip("Browse for resourcepacks folders");
      o->box(FL_BORDER_BOX);
      o->down_box(FL_BORDER_BOX);
      o->color(FL_DARK2);
      o->selection_color((Fl_Color)43);
      o->callback((Fl_Callback*)browse);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(445, 330, 110, 25, "Reload");
      o->tooltip("Reload list of resourcepacks");
      o->box(FL_BORDER_BOX);
      o->color(FL_DARK2);
      o->selection_color((Fl_Color)43);
      o->callback((Fl_Callback*)reload);
    } // Fl_Button* o
    { path_input = new Fl_Input(120, 330, 225, 24, "Resourcepacks: ");
      path_input->tooltip("Input resourcepacks folder manually");
      path_input->box(FL_BORDER_BOX);
      path_input->labelsize(12);
      path_input->textsize(12);
      path_input->callback((Fl_Callback*)editpath);
      path_input->align(Fl_Align(36));
    } // Fl_Input* path_input
    { Fl_Button* o = new Fl_Button(25, 10, 65, 20, "Settings");
      o->tooltip("Edit Settings");
      o->box(FL_FLAT_BOX);
      o->down_box(FL_FLAT_BOX);
      o->color(FL_DARK2);
      o->selection_color((Fl_Color)43);
      o->callback((Fl_Callback*)opensettings);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(570, 10, 65, 20, "Help");
      o->tooltip("Open help screen");
      o->box(FL_FLAT_BOX);
      o->down_box(FL_FLAT_BOX);
      o->color(FL_DARK2);
      o->selection_color((Fl_Color)43);
      o->callback((Fl_Callback*)openhelp);
    } // Fl_Button* o
    { box1 = new Fl_Box(25, 10, 65, 20);
      box1->box(FL_BORDER_FRAME);
      box1->color((Fl_Color)34);
    } // Fl_Box* box1
    { box2 = new Fl_Box(570, 10, 65, 20);
      box2->box(FL_BORDER_FRAME);
      box2->color((Fl_Color)34);
    } // Fl_Box* box2
    { allpacks = new Fl_Check_Button(570, 330, 59, 25, "All");
      allpacks->tooltip("Select/Deselect all resourcepacks");
      allpacks->down_box(FL_DOWN_BOX);
      allpacks->value(1);
      allpacks->callback((Fl_Callback*)selectall);
      allpacks->when(FL_WHEN_CHANGED);
    } // Fl_Check_Button* allpacks
    { outputlevelslider = new Fl_Value_Slider(220, 10, 200, 20, "Output Level: ");
      outputlevelslider->tooltip("Updates the amount of text shown\n1 = Most text, 5 = Least text");
      outputlevelslider->type(1);
      outputlevelslider->box(FL_BORDER_BOX);
      outputlevelslider->maximum(5);
      outputlevelslider->step(1);
      outputlevelslider->value(3);
      outputlevelslider->textsize(14);
      outputlevelslider->callback((Fl_Callback*)updateoutputlevel);
      outputlevelslider->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Value_Slider* outputlevelslider
    window->end();
  } // Fl_Double_Window* window
  { edit_paths = new Fl_Double_Window(269, 300, "Edit Paths");
    edit_paths->color((Fl_Color)48);
    edit_paths->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(10, 270, 120, 20, "Add");
      o->tooltip("Browse for resourcepacks folder");
      o->box(FL_BORDER_BOX);
      o->down_box(FL_BORDER_BOX);
      o->color(FL_DARK2);
      o->selection_color((Fl_Color)43);
      o->callback((Fl_Callback*)addrespath);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(140, 270, 120, 20, "Delete");
      o->tooltip("Remove selected folder");
      o->box(FL_BORDER_BOX);
      o->down_box(FL_BORDER_BOX);
      o->color(FL_DARK2);
      o->selection_color((Fl_Color)43);
      o->callback((Fl_Callback*)deleterespath);
    } // Fl_Button* o
    { paths = new Fl_Scroll(10, 15, 250, 245);
      paths->box(FL_BORDER_BOX);
      paths->color(FL_BACKGROUND2_COLOR);
      paths->labeltype(FL_NO_LABEL);
      paths->end();
    } // Fl_Scroll* paths
    edit_paths->end();
  } // Fl_Double_Window* edit_paths
  { settings = new Fl_Double_Window(0, 0, "Settings");
    settings->user_data((void*)(this));
    settings->end();
  } // Fl_Double_Window* settings
  { help = new Fl_Window(400, 320, "Help");
    help->user_data((void*)(this));
    { Fl_Help_View* o = new Fl_Help_View(0, 0, 400, 320);
      o->box(FL_FLAT_BOX);
      o->value("<html><body><p><font face=\"Helvetica\">Hi there, welcome to MCPPPP.</font></p><p><font face=\"Helvetica\">To begin, click the Browse button to browse for a path. Click the Add button and locate your Minecraft resourceapcks folder.<br><strong>IMPORTANT: </strong>This should be <code>.minecraft/resourcepacks</code>, not the resourcepack itself.<br>At the bottom, select which conversions you want to do, and select which resourcepacks to convert at the right (you may need to reload first).<br>When you are done with that, you may press the Run button to start the conversion process.</font></p><p><font face=\"Helvetica\">For additional support, please check out <a href=\"https://github.com/supsm/MCPPPP/blob/master/GUI.md\">https://github.com/supsm/MCPPPP/blob/master/GUI.md</a></font></p></body></html>");
    } // Fl_Help_View* o
    help->end();
  } // Fl_Window* help
  { path_warning = new Fl_Window(200, 160, "Warning");
    path_warning->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(10, 10, 180, 100, "Potentially incorrect path detected. Make sure the path inputted is the path \
of the resourcepacks folder, instead of any individual resource pack.");
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(10, 125, 85, 20, "Close");
      o->box(FL_BORDER_BOX);
      o->down_box(FL_BORDER_BOX);
      o->color(FL_DARK2);
      o->selection_color((Fl_Color)43);
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    { dontshowwarning = new Fl_Check_Button(100, 125, 90, 20, "Don\'t show");
      dontshowwarning->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* dontshowwarning
    path_warning->end();
  } // Fl_Window* path_warning
}

void UI::show() {
  window->show();
}

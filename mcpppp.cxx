// generated by Fast Light User Interface Designer (fluid) version 1.0306

#include "mcpppp.h"

UI::UI() {
  { window = new Fl_Window(660, 390, "MCPPPP");
    window->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(525, 350, 110, 30, "Run");
      o->down_box(FL_UP_BOX);
      o->callback((Fl_Callback*)run);
    } // Fl_Button* o
    { // Output in place of stdout
      text_display = new Fl_Text_Display(25, 25, 395, 275);
      text_display->box(FL_BORDER_BOX);
    } // Fl_Text_Display* text_display
    { Fl_Check_Button* o = new Fl_Check_Button(25, 360, 56, 16, "FSB");
      o->down_box(FL_DOWN_BOX);
      o->value(1);
      o->callback((Fl_Callback*)conversion);
      o->when(FL_WHEN_CHANGED);
    } // Fl_Check_Button* o
    { Fl_Check_Button* o = new Fl_Check_Button(185, 360, 56, 16, "VMT");
      o->down_box(FL_DOWN_BOX);
      o->value(1);
      o->callback((Fl_Callback*)conversion);
      o->when(FL_WHEN_CHANGED);
    } // Fl_Check_Button* o
    { Fl_Check_Button* o = new Fl_Check_Button(360, 360, 56, 16, "CIM");
      o->down_box(FL_DOWN_BOX);
      o->value(1);
      o->callback((Fl_Callback*)conversion);
      o->when(FL_WHEN_CHANGED);
    } // Fl_Check_Button* o
    { scroll = new Fl_Scroll(445, 40, 190, 260, "Resourcepacks to convert");
      { // padding
        Fl_Check_Button* o = new Fl_Check_Button(445, 45, 190, 15);
        o->down_box(FL_DOWN_BOX);
        o->labeltype(FL_NO_LABEL);
        o->hide();
        o->deactivate();
      } // Fl_Check_Button* o
      scroll->end();
    } // Fl_Scroll* scroll
    { Fl_Button* o = new Fl_Button(430, 315, 64, 25, "Browse");
      o->callback((Fl_Callback*)browse);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(525, 315, 110, 25, "Reload");
      o->callback((Fl_Callback*)reload);
    } // Fl_Button* o
    { path_input = new Fl_Input(130, 315, 290, 24, "Resourcepacks:");
      path_input->callback((Fl_Callback*)editpath);
      path_input->when(FL_WHEN_ENTER_KEY);
    } // Fl_Input* path_input
    window->end();
  } // Fl_Window* window
  { edit_paths = new Fl_Window(270, 300, "Edit Paths");
    edit_paths->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(10, 270, 120, 20, "Add");
      o->callback((Fl_Callback*)addrespath);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(140, 270, 120, 20, "Delete");
      o->callback((Fl_Callback*)deleterespath);
    } // Fl_Button* o
    { paths = new Fl_Scroll(10, 15, 250, 245);
      paths->box(FL_BORDER_BOX);
      paths->color(FL_BACKGROUND2_COLOR);
      paths->labeltype(FL_NO_LABEL);
      paths->end();
    } // Fl_Scroll* paths
    edit_paths->end();
  } // Fl_Window* edit_paths
}

void UI::show() {
  window->show();
}
